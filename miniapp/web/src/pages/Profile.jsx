// web/src/pages/Profile.jsx

import { useEffect, useState } from "react";
import { useOutletContext } from "react-router-dom";
import axios from "axios";

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
const initialFormState = {
  name: "",
  surname: "",
  phone: "",
  email: "",
  department: "",
  group: "", // –í React-–∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'group', axios –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∏–º–µ–Ω–∏ –¥–ª—è API
  course: "",
  status: "",
  lang: "ua",
};

export default function Profile() {
  const { API, status, initData } = useOutletContext();

  // --- –°–û–°–¢–û–Ø–ù–ò–Ø –ö–û–ú–ü–û–ù–ï–ù–¢–ê ---
  const [profile, setProfile] = useState(null); // –¥–ª—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  const [form, setForm] = useState(initialFormState); // –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
  const [saving, setSaving] = useState(false); // –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
  const [msg, setMsg] = useState(""); // –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
  const [err, setErr] = useState(""); // –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

  // --- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –° –°–ï–†–í–ï–†–ê ---
  useEffect(() => {
    if (status !== "ok") return; // –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã ‚Äî –Ω–µ —Ö–æ–¥–∏–º –≤ API

    axios.get(`${API}/api/profile`, {
      headers: { "X-Telegram-InitData": initData }
    })
    .then(r => {
      setProfile(r.data);
      // –í–∞–∂–Ω–æ: –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
      setForm(r.data);
    })
    .catch(e => setErr(e?.response?.statusText || "error"));
  }, [status, API, initData]);


  // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ---

  // –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
  const setField = (fieldName, value) => {
    setForm(prevForm => ({
      ...prevForm,
      [fieldName]: value
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const save = async () => {
    setSaving(true);
    setMsg("");
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã
      await axios.post(`${API}/api/profile`, form, {
        headers: { "X-Telegram-InitData": initData }
      });
      setMsg("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
    } catch (error) {
      setMsg('üö´ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error?.response?.data?.detail || "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–µ—Ä"}');
    } finally {
      setSaving(false);
    }
  };

  // --- –†–ï–ù–î–ï–†–ò–ù–ì –ö–û–ú–ü–û–ù–ï–ù–¢–ê ---

  if (status !== "ok") return <p style={{opacity:.7}}>–í—ñ–¥–∫—Ä–∏–π—Ç–µ —á–µ—Ä–µ–∑ Telegram, —â–æ–± —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å</p>;
  if (!profile) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è‚Ä¶ {err && `(${err})`}</p>;

  // –¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ <pre> –º—ã —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É
  return (
    <div>
      <h2>–ü—Ä–æ—Ñ—ñ–ª—å</h2>

      <Grid>
        <Input label="–Ü–º º—è"       value={form.name || ''}       onChange={e=>setField("name", e.target.value)} />
        <Input label="–ü—Ä—ñ–∑–≤–∏—â–µ"   value={form.surname || ''}    onChange={e=>setField("surname", e.target.value)} />
        <Input label="–¢–µ–ª–µ—Ñ–æ–Ω"    value={form.phone || ''}      onChange={e=>setField("phone", e.target.value)} />
        <Input label="Email"      value={form.email || ''}      onChange={e=>setField("email", e.target.value)} />
        <Input label="–§–∞–∫—É–ª—å—Ç–µ—Ç"  value={form.department || ''} onChange={e=>setField("department", e.target.value)} />
        <Input label="–ì—Ä—É–ø–∞"      value={form.group || ''}      onChange={e=>setField("group", e.target.value)} />
        <Input label="–ö—É—Ä—Å"       value={form.course || ''}     onChange={e=>setField("course", e.target.value)} />
        <Input label="–°—Ç–∞—Ç—É—Å"     value={form.status || ''}     onChange={e=>setField("status", e.target.value)} />
        <Input label="–ú–æ–≤–∞ (ua/en)" value={form.lang || ''}     onChange={e=>setField("lang", e.target.value)} />
      </Grid>

      <button onClick={save} disabled={saving}
        style={{marginTop:12, padding:"10px 14px", borderRadius:10, border:"1px solid #2a3b66", background:"#1b2130", color:"#e6e6e6", cursor:"pointer"}}>
        {saving ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è‚Ä¶" : "–ó–±–µ—Ä–µ–≥—Ç–∏"}
      </button>

      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      {msg && <p style={{marginTop:8, opacity:.8}}>{msg}</p>}
    </div>
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≤–µ—Ä—Å—Ç–∫–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function Grid({children}) {
  return <div style={{
    display:"grid", gridTemplateColumns:"1fr 1fr", gap:12,
    background:"#12161f", border:"1px solid #232b40", padding:12, borderRadius:12
  }}>{children}</div>;
}
function Input({label, ...props}) {
  return (
    <label style={{display:"grid", gap:6}}>
      <span style={{opacity:.8}}>{label}</span>
      <input {...props} style={{padding:"10px", borderRadius:10, border:"1px solid #2a3b66", background:"#0f1115", color:"#e6e6e6"}}/>
    </label>
  );
}
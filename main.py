import os
import telebot
from telebot import types
import time
from random import randint
import sqlite3
import re
import asyncio
import os.path
from pathlib import Path
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton

FRONT_URL = "https://myoladean.serveo.net"


# ===== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –±—ã–ª–æ) =====
group, phone, email, departament, surname, name, userID, course, birthday = '', '', '', '', '', '', '', '', ''
bot = telebot.TeleBot('7049824274:AAEPN7qLbCZRt3kCbN63aPm_AmQemXdNpmM')

admID = [6113448235]

# ====== –£—Ç–∏–ª–∏—Ç—ã ======

def has_digits(s: str) -> bool:
    """True, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—å –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É."""
    return any(ch.isdigit() for ch in s)

def miniapp_menu(url: str):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(KeyboardButton("üì≤ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", web_app=WebAppInfo(url=url)))
    return kb

def is_convertible_to_str(string):
    try:
        int(string)
        return True
    except ValueError:
        return False

def check_user_auth(user_id):
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute('SELECT userID FROM students WHERE userID = ?', (user_id,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    return result is not None

def validate_date(data):
    pattern = r'^\d{2}\.\d{2}\.\d{4}$'  # "–¥–¥.–º–º.—Ä—Ä—Ä—Ä"
    return bool(re.match(pattern, data))

# ====== –ê–¥–º–∏–Ω-–º–µ–Ω—é ======

def admCabinet(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('üïñ–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥')
    item2 = types.KeyboardButton('üîç–ü–æ—à—É–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤')
    item3 = types.KeyboardButton('‚Ñπ–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, '‚úÖ–í–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—å —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=markup)

# ====== Mini App –∫–æ–º–∞–Ω–¥—ã ======

@bot.message_handler(commands=['app'])
def open_app(message):
    bot.send_message(
        message.chat.id,
        "–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫:",
        reply_markup=miniapp_menu(FRONT_URL)
    )

# ====== –°—Ç–∞—Ä—Ç ======

@bot.message_handler(commands=['start'])
def hello(message):
    global userID
    userID = message.chat.id
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute(
        'CREATE TABLE IF NOT EXISTS students (userID int(50) ,name varchar(20) , surname varchar(20) ,birthday varchar(20), department varchar(50) , studentGroup varchar(50) , course int(2) ,  phoneNumber int(20) , email varchar(50) , status varchar(50))')
    cur.close()
    conn.close()
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É Mini App —Å—Ä–∞–∑—É –≤ —Å—Ç–∞—Ä—Ç
    bot.send_message(message.chat.id, "üì≤ –®–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É:", reply_markup=miniapp_menu(FRONT_URL))

    if message.chat.id in admID:
        admCabinet(message)
    elif check_user_auth(userID):
        menu(message)
    else:
        bot.send_message(message.chat.id, 'üëã–í—ñ—Ç–∞—é, üÜï–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è...')
        bot.register_next_step_handler(message, nameFunc)

# ====== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ======

def nameFunc(message):
    global name
    if has_digits(message.text):
        bot.send_message(message.chat.id, "üö´–ü–æ–º–∏–ª–∫–∞! –Ü–º'—è –º–æ–∂–µ –≤–º—ñ—â–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...")
        bot.register_next_step_handler(message, nameFunc)
    else:
        name = message.text
        bot.send_message(message.chat.id, '‚úè–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ü—Ä—ñ–∑–≤–∏—â–µ...')
        bot.register_next_step_handler(message, surnameFunc)

def surnameFunc(message):
    global surname
    if has_digits(message.text):
        bot.send_message(message.chat.id, 'üö´–ü–æ–º–∏–ª–∫–∞! ‚úè–ü—Ä—ñ–∑–≤–∏—â–µ –º–æ–∂–µ –≤–º—ñ—â–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...')
        bot.register_next_step_handler(message, surnameFunc)
    else:
        surname = message.text
        bot.send_message(message.chat.id, 'üéÇ–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä ...')
        bot.register_next_step_handler(message, birthdayFunc)

def birthdayFunc(message):
    global birthday
    if validate_date(message.text):
        birthday = message.text
        bot.send_message(message.chat.id, 'üï∂–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –§–∞–∫—É–ª—å—Ç–µ—Ç...')
        bot.register_next_step_handler(message, departamentFunc)
    else:
        bot.send_message(message.chat.id,
                         'üö´–ü–æ–º–∏–ª–∫–∞!üéÇ–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...')
        bot.register_next_step_handler(message, birthdayFunc)

def departamentFunc(message):
    global departament
    departament = message.text
    bot.send_message(message.chat.id, 'üßê–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ö—É—Ä—Å...')
    bot.register_next_step_handler(message, courseFunc)

def courseFunc(message):
    global course
    course = message.text
    bot.send_message(message.chat.id, 'üë•–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—É...')
    bot.register_next_step_handler(message, groupFunc)

def groupFunc(message):
    global group
    group = message.text
    bot.send_message(message.chat.id, 'üì±–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É(–ø—Ä. 380961231231)...')
    bot.register_next_step_handler(message, phoneFunc)

def phoneFunc(message):
    global phone
    if is_convertible_to_str(message.text) and len(message.text) == 12:
        phone = message.text
        bot.send_message(message.chat.id, 'üìß–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω—É —Å–∫—Ä–∏–Ω—å–∫—É(–ø—Ä. primary@gmail.com)...')
        bot.register_next_step_handler(message, emailFunc)
    else:
        bot.send_message(message.chat.id,
                         'üö´–ü–æ–º–∏–ª–∫–∞! üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–æ–∂–µ –≤–º—ñ—â–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ (–ø—Ä. 380961231231)! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...')
        bot.register_next_step_handler(message, phoneFunc)

def emailFunc(message):
    global email
    if '@' in message.text:
        email = message.text
        insertIntoDB(message)
    else:
        bot.send_message(message.chat.id,
                         "üö´–ü–æ–º–∏–ª–∫–∞! üìß–ï–ª–µ–∫—Ç—Ä–æ–Ω–∞ —Å–∫—Ä–∏–Ω—å–∫–∞ –º–∞—î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–º—ñ—â–∞—Ç–∏ @! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...")
        bot.register_next_step_handler(message, emailFunc)

def insertIntoDB(message):
    global userID
    userID = message.chat.id
    global group, phone, email, departament, surname, name, course, birthday
    student_info = [userID, name, surname, birthday, departament, group, course, phone, email]
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute(
        'INSERT INTO students (userID , name, surname, birthday , department, studentGroup, course , phoneNumber, email) VALUES (?, ?, ?, ?, ?, ?, ?, ? , ?)',
        student_info)
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, '‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å')
    menu(message)

# ====== –ú–µ–Ω—é ======

def menu(message):
    if message.chat.id in admID:
        admCabinet(message)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        item1 = types.KeyboardButton('üë•–ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
        item2 = types.KeyboardButton('‚Ñπ–°—Ç–∞—Ç—É—Å')
        item3 = types.KeyboardButton('üéá–°–æ—Ü. –ú–µ—Ä–µ–∂—ñ')
        item4 = types.KeyboardButton('üïñ–†–æ–∑–∫–ª–∞–¥')
        markup.add(item1, item2, item3, item4)
        # –¥–æ–±–∞–≤–∏–º –º–∏–Ω–∏-–∞–ø–ø—É –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–æ–ø.—Ä—è–¥)
        markup.row(KeyboardButton("üì≤ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫", web_app=WebAppInfo(url=FRONT_URL)))
        bot.send_message(message.chat.id, 'üõ£–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', reply_markup=markup)

# ====== –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ) ======

@bot.message_handler(func=lambda message: message.text == 'üë•–ú–æ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è')
def send_info(message):
    global userID
    userID = message.chat.id
    print(userID)
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('‚úè–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ')
    item2 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
    markup.add(item1, item2)
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute('SELECT * FROM students WHERE userID = ?', (userID,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    print(result)
    name, surname, birthday, department, group, course, phone, email = result[1:9]
    info_message = f"‚Ñπ–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\nüÜï–Ü–º'—è: {name}\n‚úè–ü—Ä—ñ–∑–≤–∏—â–µ: {surname}\nüéÇ–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birthday}\nüï∂–§–∞–∫—É–ª—å—Ç–µ—Ç: {department}\nüë•–ì—Ä—É–ø–∞: {group}\nüßê–ö—É—Ä—Å: {course}\nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone}\nüìß–ï–ª–µ–∫—Ç—Ä–æ–Ω–∞ —Å–∫—Ä–∏–Ω—å–∫–∞: {email}"
    bot.send_message(message.chat.id, info_message, parse_mode='HTML', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üö´–ù–∞–∑–∞–¥')
def returnToMenu(message):
    menu(message)

@bot.message_handler(func=lambda message: message.text == '‚úè–ó–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ')
def changeInfo(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üÜï–Ü–º'—è", callback_data='name')
    button2 = types.InlineKeyboardButton("‚úè–ü—Ä—ñ–∑–≤–∏—â–µ", callback_data='surname')
    button3 = types.InlineKeyboardButton("üéÇ–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", callback_data='birthday')
    button4 = types.InlineKeyboardButton("üï∂–§–∞–∫—É–ª—å—Ç–µ—Ç", callback_data='departament')
    button5 = types.InlineKeyboardButton("üë•–ì—Ä—É–ø–∞", callback_data='group')
    button6 = types.InlineKeyboardButton("üßê–ö—É—Ä—Å", callback_data='course')
    button7 = types.InlineKeyboardButton("üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data='phone')
    button8 = types.InlineKeyboardButton("üìß–ï–ª–µ–∫—Ç—Ä–æ–Ω–∞ —Å–∫—Ä–∏–Ω—å–∫–∞", callback_data='email')
    button9 = types.InlineKeyboardButton("üö´–ù–∞–∑–∞–¥", callback_data='menu')
    markup.add(button1, button2, button3, button4, button5, button6, button7, button8, button9)
    bot.send_message(message.chat.id, '‚úè–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
    markup.add(item1)
    if call.data == 'phoneDecanat':
        bot.send_message(call.message.chat.id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–µ–∫–∞–Ω–∞—Ç—É: <code>+380123123123</code>', parse_mode='HTML')
    if call.data == 'menu':
        menu(call.message)
    if call.data == 'name':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ üÜï–Ü–º'—è...", reply_markup=markup)
    elif call.data == 'surname':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ ‚úè–ü—Ä—ñ–∑–≤–∏—â–µ...", reply_markup=markup)
    elif call.data == 'departament':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π üï∂–§–∞–∫—É–ª—å—Ç–µ—Ç...", reply_markup=markup)
    elif call.data == 'group':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É üë•–≥—Ä—É–ø—É...", reply_markup=markup)
    elif call.data == 'phone':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É...", reply_markup=markup)
    elif call.data == 'email':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É üìß–µ–ª–µ–∫—Ç—Ä–æ–Ω—É —Å–∫—Ä–∏–Ω—å–∫—É...", reply_markup=markup)
    elif call.data == 'course':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π üßê–ö—É—Ä—Å...", reply_markup=markup)
    elif call.data == 'birthday':
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É üéÇ–¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è...", reply_markup=markup)
    bot.register_next_step_handler(call.message, insertNewData, call.message.chat.id, call)

def insertNewData(message, chat_id, call):
    newData = message.text
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    global userID
    userID = message.chat.id
    if call.data == 'name':
        if has_digits(message.text) and message.text != 'üö´–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "üö´–ü–æ–º–∏–ª–∫–∞! –Ü–º'—è –º–æ–∂–µ –≤–º—ñ—â–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...")
            bot.register_next_step_handler(message, insertNewData, call.message.chat.id, call)
        elif message.text != 'üö´–ù–∞–∑–∞–¥':
            cur.execute("UPDATE students SET name = ? WHERE userID = ?", (newData, userID))
            bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
            menu(message)
    elif call.data == 'surname':
        if has_digits(message.text) and message.text != 'üö´–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "üö´–ü–æ–º–∏–ª–∫–∞! –ü—Ä—ñ–∑–≤–∏—â–µ –º–æ–∂–µ –≤–º—ñ—â–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –±—É–∫–≤–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...")
            bot.register_next_step_handler(message, insertNewData, call.message.chat.id, call)
        elif message.text != 'üö´–ù–∞–∑–∞–¥':
            cur.execute("UPDATE students SET surname = ? WHERE userID = ?", (newData, userID))
            bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
            menu(message)
    elif call.data == 'departament':
        if message.text != 'üö´–ù–∞–∑–∞–¥':
            cur.execute("UPDATE students SET department = ? WHERE userID = ?", (newData, userID))
            bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
            menu(message)
    elif call.data == 'group':
        if message.text != 'üö´–ù–∞–∑–∞–¥':
            cur.execute("UPDATE students SET studentGroup = ? WHERE userID = ?", (newData, userID))
            bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
            menu(message)
    elif call.data == 'phone':
        if is_convertible_to_str(message.text) and message.text != 'üö´–ù–∞–∑–∞–¥':
            if len(message.text) == 12:
                cur.execute("UPDATE students SET phoneNumber = ? WHERE userID = ?", (newData, userID))
                bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
                menu(message)
            else:
                bot.send_message(message.chat.id,
                                 "üö´–ü–æ–º–∏–ª–∫–∞! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–æ–∂–µ –≤–º—ñ—â–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ 12 –∑–Ω–∞–∫—ñ–≤ (–ø—Ä. 380961231231)! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...")
                bot.register_next_step_handler(message, insertNewData, call.message.chat.id, call)
        elif message.text != 'üö´–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id,
                             "üö´–ü–æ–º–∏–ª–∫–∞! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–æ–∂–µ –≤–º—ñ—â–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ 12 –∑–Ω–∞–∫—ñ–≤ (–ø—Ä. 380961231231)! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...")
            bot.register_next_step_handler(message, insertNewData, call.message.chat.id, call)
    elif call.data == 'email':
        if '@' in message.text:
            cur.execute("UPDATE students SET email = ? WHERE userID = ?", (newData, userID))
            bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
            menu(message)
        elif message.text != 'üö´–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id,
                             "üö´–ü–æ–º–∏–ª–∫–∞! üìß–ï–ª–µ–∫—Ç—Ä–æ–Ω–∞ —Å–∫—Ä–∏–Ω—å–∫–∞ –º–∞—î –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤–º—ñ—â–∞—Ç–∏ @! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...")
            bot.register_next_step_handler(message, insertNewData, call.message.chat.id, call)
    elif call.data == 'course':
        cur.execute("UPDATE students SET course = ? WHERE userID = ?", (newData, userID))
        bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
        menu(message)
    elif call.data == 'birthday':
        if validate_date(message.text):
            cur.execute("UPDATE students SET birthday = ? WHERE userID = ?", (newData, userID))
            bot.send_message(chat_id, "‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–∏–ª–∏ –¥–∞–Ω—ñ!")
            menu(message)
        else:
            bot.send_message(message.chat.id,
                             'üö´–ü–æ–º–∏–ª–∫–∞!üéÇ–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...')
            bot.register_next_step_handler(message, insertNewData, call.message.chat.id, call)

    conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(func=lambda message: message.text == '‚Ñπ–°—Ç–∞—Ç—É—Å')
def status(message):
    global userID
    userID = message.chat.id
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute('SELECT status FROM students WHERE userID = ?', (userID,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    if result == (None,):
        markup = types.ReplyKeyboardMarkup(row_width=2)
        item1 = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ ‚Ñπ–°—Ç–∞—Ç—É—Å')
        item2 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
        markup.add(item1, item2)
        bot.send_message(message.chat.id, '–í–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ‚Ñπ–°—Ç–∞—Ç—É—Å', reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        item1 = types.KeyboardButton('–ó–º—ñ–Ω–∏—Ç–∏ ‚Ñπ–°—Ç–∞—Ç—É—Å')
        item2 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
        markup.add(item1, item2)
        result = str(result)
        result = result.replace("('", "").replace("',)", "")
        bot.send_message(message.chat.id, f'–í–∞—à ‚Ñπ–°—Ç–∞—Ç—É—Å:{result}', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–ó–º—ñ–Ω–∏—Ç–∏ ‚Ñπ–°—Ç–∞—Ç—É—Å')
def changeStatus(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('üè°–í–¥–æ–º–∞')
    item2 = types.KeyboardButton('ü§í–•–≤–æ—Ä–∏–π')
    item3 = types.KeyboardButton('üíº–ü—Ä–∞—Ü—é—é')
    item4 = types.KeyboardButton('üõ´–ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º')
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö ‚Ñπ–°—Ç–∞—Ç—É—Å—ñ–≤', reply_markup=markup)

    @bot.message_handler(func=lambda message: message.text == 'üè°–í–¥–æ–º–∞')
    def temp(message): setStatus(message, 'üè°–í–¥–æ–º–∞')

    @bot.message_handler(func=lambda message: message.text == 'üíº–ü—Ä–∞—Ü—é—é')
    def temp(message): setStatus(message, 'üíº–ü—Ä–∞—Ü—é—é')

    @bot.message_handler(func=lambda message: message.text == 'ü§í–•–≤–æ—Ä–∏–π')
    def temp(message): setStatus(message, 'ü§í–•–≤–æ—Ä–∏–π')

    @bot.message_handler(func=lambda message: message.text == 'üõ´–ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º')
    def temp(message): setStatus(message, 'üõ´–ó–∞ –∫–æ—Ä–¥–æ–Ω–æ–º')

def setStatus(message, statusStr):
    global userID
    userID = message.chat.id
    conn = sqlite3.connect('database.sql')
    cur = conn.cursor()
    cur.execute("UPDATE students SET status = ? WHERE userID = ?", (statusStr, userID))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, '‚úÖ–ù–æ–≤–∏–π ‚Ñπ–°—Ç–∞—Ç—É—Å —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
    menu(message)

@bot.message_handler(func=lambda message: message.text == 'üïñ–†–æ–∑–∫–ª–∞–¥')
def selectCourse(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('1 –ö—É—Ä—Å')
    item2 = types.KeyboardButton('2 –ö—É—Ä—Å')
    item3 = types.KeyboardButton('3 –ö—É—Ä—Å')
    item4 = types.KeyboardButton('4 –ö—É—Ä—Å')
    item5 = types.KeyboardButton('5 –ö—É—Ä—Å')
    item6 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å üßê–ö—É—Ä—Å', reply_markup=markup)

    @bot.message_handler(func=lambda message: message.text == '1 –ö—É—Ä—Å')
    def temp(message):
        sendFile(message, '1')

    @bot.message_handler(func=lambda message: message.text == '2 –ö—É—Ä—Å')
    def temp(message):
        sendFile(message, '2')

    @bot.message_handler(func=lambda message: message.text == '3 –ö—É—Ä—Å')
    def temp(message):
        sendFile(message, '3')

    @bot.message_handler(func=lambda message: message.text == '4 –ö—É—Ä—Å')
    def temp(message):
        sendFile(message, '4')

    @bot.message_handler(func=lambda message: message.text == '5 –ö—É—Ä—Å')
    def temp(message):
        sendFile(message, '5')

    def sendFile(message, num):
        suffixes = ["txt", "pdf", "docx", "csv", "xls", "xlsx", "png"]
        file_found = False
        for suffix in suffixes:
            print(num, suffix)
            try:
                with open(f"{num}.{suffix}", 'rb') as file:
                    bot.send_document(message.chat.id, file)
                    file_found = True
                    menu(message)

            except FileNotFoundError:
                pass
        if not file_found:
            bot.send_message(message.chat.id, 'üïñ–†–æ–∑–∫–ª–∞–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
            menu(message)

@bot.message_handler(func=lambda message: message.text == 'üïñ–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥')
def setTable(message):
    if message.chat.id in admID:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        item1 = types.KeyboardButton('1')
        item2 = types.KeyboardButton('2')
        item3 = types.KeyboardButton('3')
        item4 = types.KeyboardButton('4')
        item5 = types.KeyboardButton('5')
        item6 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
        markup.add(item1, item2, item3, item4, item5, item6)
        bot.send_message(message.chat.id, 'üß≠–û–±–µ—Ä—ñ—Ç—å –ö—É—Ä—Å —è–∫–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ üïñ–†–æ–∑–∫–ª–∞–¥', reply_markup=markup)

        @bot.message_handler(func=lambda message: message.text == '1')
        def setTableHandle(message):
            markup = types.ReplyKeyboardMarkup(row_width=2)
            item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
            markup.add(item1)
            bot.send_message(message.chat.id, 'üìÑ–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª –∑ üïñ–†–æ–∑–∫–ª–∞–¥–æ–º', reply_markup=markup)

            @bot.message_handler(content_types=['document'])
            def handle_document(message):
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                file_extension = Path(file_info.file_path).suffix
                filename = f"1{file_extension}"
                with open(filename, 'wb') as new_file:
                    new_file.write(downloaded_file)
                bot.send_message(message.chat.id, '‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥')
                setTable(message)

        @bot.message_handler(func=lambda message: message.text == '2')
        def setTableHandle(message):
            markup = types.ReplyKeyboardMarkup(row_width=2)
            item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
            markup.add(item1)
            bot.send_message(message.chat.id, 'üìÑ–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª –∑ üïñ–†–æ–∑–∫–ª–∞–¥–æ–º', reply_markup=markup)

            @bot.message_handler(content_types=['document'])
            def handle_document(message):
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                file_extension = Path(file_info.file_path).suffix
                filename = f"2{file_extension}"
                with open(filename, 'wb') as new_file:
                    new_file.write(downloaded_file)
                    bot.send_message(message.chat.id, '‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥')
                    setTable(message)

        @bot.message_handler(func=lambda message: message.text == '3')
        def setTableHandle(message):
            markup = types.ReplyKeyboardMarkup(row_width=2)
            item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
            markup.add(item1)
            bot.send_message(message.chat.id, 'üìÑ–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª –∑ üïñ–†–æ–∑–∫–ª–∞–¥–æ–º', reply_markup=markup)

            @bot.message_handler(content_types=['document'])
            def handle_document(message):
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                file_extension = Path(file_info.file_path).suffix
                filename = f"3{file_extension}"
                with open(filename, 'wb') as new_file:
                    new_file.write(downloaded_file)
                    bot.send_message(message.chat.id, '‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥')
                    setTable(message)

        @bot.message_handler(func=lambda message: message.text == '4')
        def setTableHandle(message):
            markup = types.ReplyKeyboardMarkup(row_width=2)
            item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
            markup.add(item1)
            bot.send_message(message.chat.id, 'üìÑ–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª –∑ üïñ–†–æ–∑–∫–ª–∞–¥–æ–º', reply_markup=markup)

            @bot.message_handler(content_types=['document'])
            def handle_document(message):
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                file_extension = Path(file_info.file_path).suffix
                filename = f"4{file_extension}"
                with open(filename, 'wb') as new_file:
                    new_file.write(downloaded_file)
                    bot.send_message(message.chat.id, '‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥')
                    setTable(message)

        @bot.message_handler(func=lambda message: message.text == '5')
        def setTableHandle(message):
            markup = types.ReplyKeyboardMarkup(row_width=2)
            item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
            markup.add(item1)
            bot.send_message(message.chat.id, 'üìÑ–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª –∑ üïñ–†–æ–∑–∫–ª–∞–¥–æ–º', reply_markup=markup)

            @bot.message_handler(content_types=['document'])
            def handle_document(message):
                file_info = bot.get_file(message.document.file_id)
                downloaded_file = bot.download_file(file_info.file_path)
                file_extension = Path(file_info.file_path).suffix
                filename = f"5{file_extension}"
                with open(filename, 'wb') as new_file:
                    new_file.write(downloaded_file)
                    bot.send_message(message.chat.id, '‚úÖ–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥')
                    setTable(message)
    else:
        bot.send_message(message.chat.id, 'üö´–í–∞–º –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ –≤ –¥–æ—Å—Ç—É–ø—ñ')
        menu(message)

@bot.message_handler(func=lambda message: message.text == 'üîç–ü–æ—à—É–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤')
def searchStudents(message):
    if message.chat.id in admID:
        markup = types.ReplyKeyboardMarkup(row_width=2)
        item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
        markup.add(item1)
        bot.send_message(message.chat.id, '–í–≤–µ–¥—ñ—Ç—å ‚úè–ü—Ä—ñ–∑–≤–∏—â–µ —Å—Ç—É–¥–µ–Ω—Ç–∞...', reply_markup=markup)
        bot.register_next_step_handler(message, searchStudentsHandle)
    else:
        bot.send_message(message.chat.id, 'üö´–í–∞–º –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ –≤ –¥–æ—Å—Ç—É–ø—ñ')
        menu(message)

def searchStudentsHandle(message):
    if message.text != 'üö´–ù–∞–∑–∞–¥':
        conn = sqlite3.connect('database.sql')
        cur = conn.cursor()
        cur.execute(
            'SELECT name , surname , birthday , department , studentgroup , phoneNumber , email , status , course  FROM students WHERE surname = ?',
            (message.text,))
        result = cur.fetchall()
        cur.close()
        conn.close()
        if not result:
            bot.send_message(message.chat.id, 'üö´–ü–æ–º–∏–ª–∫–∞! –°—Ç—É–¥–µ–Ω—Ç–∞ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑...')
            searchStudents(message)
        for row in result:
            name = row[0]
            surname = row[1]
            birthday = row[2]
            department = row[3]
            studentGroup = row[4]
            phoneNumber = row[5]
            email = row[6]
            status = row[7]
            course = row[8]
            info_message = f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Å—Ç—É–¥–µ–Ω—Ç–∞\nüÜï–Ü–º'—è: {name}\n‚úè–ü—Ä—ñ–∑–≤–∏—â–µ: {surname}\nüéÇ–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birthday}\nüï∂–§–∞–∫—É–ª—å—Ç–µ—Ç: {department}\nüë•–ì—Ä—É–ø–∞: {studentGroup}\nüßê–ö—É—Ä—Å: {course}\nüì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phoneNumber}\nüìß–ï–ª–µ–∫—Ç—Ä–æ–Ω–∞ —Å–∫—Ä–∏–Ω—å–∫–∞: {email}\n‚Ñπ–°—Ç–∞—Ç—É—Å: {status}"
            bot.send_message(message.chat.id, info_message)
            menu(message)

@bot.message_handler(func=lambda message: message.text == 'üéá–°–æ—Ü. –ú–µ—Ä–µ–∂—ñ')
def socials(message):
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="üì´Instagram",
                                         url='https://www.instagram.com/fcit_nuoua?igsh=bHc2cmdxbHA1cDQ1')
    button2 = types.InlineKeyboardButton(text="üåê–í–µ–± —Å–∞–π—Ç", url='https://onua.edu.ua/ua/')
    button3 = types.InlineKeyboardButton(text="üåê–í–µ–± —Å–∞–π—Ç –§–ö–Ü–¢", url='http://moodle.onua.edu.ua')
    button4 = types.InlineKeyboardButton(text="üìßEmail",
                                         url='https://mail.google.com/mail/u/0/?view=cm&fs=1&to=vstup@onua.edu.ua')
    button5 = types.InlineKeyboardButton(text="üìû–î–µ–∫–∞–Ω–∞—Ç", callback_data='phoneDecanat')
    markup.add(button1, button2, button3, button4, button5)
    bot.send_message(message.chat.id, '–°–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∞–¥—É:', reply_markup=markup)
    menu(message)

@bot.message_handler(func=lambda message: message.text == '‚Ñπ–ù–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º')
def whatTypeMessage(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('üìÅ–§–∞–π–ª')
    item2 = types.KeyboardButton('üìù–¢–µ–∫—Å—Ç')
    item3 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, '‚å®–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏...', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìù–¢–µ–∫—Å—Ç')
def whatMessage(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
    markup.add(item1)
    bot.send_message(message.chat.id, '‚å®–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏...', reply_markup=markup)
    bot.register_next_step_handler(message, confirmMessage)

def confirmMessage(message):
    if message.text != 'üö´–ù–∞–∑–∞–¥':
        messageData = message.text
        markup = types.ReplyKeyboardMarkup(row_width=2)
        item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
        item2 = types.KeyboardButton('‚úÖ–¢–∞–∫,–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏')
        markup.add(item1, item2)
        bot.send_message(message.chat.id, f'–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ,—â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{messageData}',
                         parse_mode='HTML', reply_markup=markup)

        @bot.message_handler(func=lambda message: message.text == '‚úÖ–¢–∞–∫,–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏')
        def sendMessage(message):
            conn = sqlite3.connect('database.sql')
            cur = conn.cursor()
            cur.execute('SELECT userID  FROM students')
            result = cur.fetchall()
            cur.close()
            conn.close()
            result = [id[0] for id in result]
            print(messageData)
            for i in result:
                bot.send_message(i, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
                bot.send_message(i, messageData)
            bot.send_message(message.chat.id, '‚úÖ–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!')
            menu(message)
    else:
        menu(message)

@bot.message_handler(func=lambda message: message.text == 'üìÅ–§–∞–π–ª')
def whatMessage(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('üö´–ù–∞–∑–∞–¥')
    markup.add(item1)
    bot.send_message(message.chat.id, 'üìÅ–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–∞–π–ª —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏...', reply_markup=markup)

    @bot.message_handler(content_types=['document'])
    def handle_document(message):
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_extension = Path(file_info.file_path).suffix
        filename = message.document.file_name
        with open(filename, 'wb') as new_file:
            new_file.write(downloaded_file)
        conn = sqlite3.connect('database.sql')
        cur = conn.cursor()
        cur.execute('SELECT userID  FROM students')
        result = cur.fetchall()
        cur.close()
        conn.close()
        result = [id[0] for id in result]
        for i in result:
            bot.send_message(i, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
            bot.send_document(i, open(filename, 'rb'))
        bot.send_message(message.chat.id, '‚úÖ–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π!')
        menu(message)

bot.polling(none_stop=True)



